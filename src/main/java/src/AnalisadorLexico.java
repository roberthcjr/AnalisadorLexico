// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/src/scanner.lex

package src;


@SuppressWarnings("fallthrough")
class AnalisadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\22\0\1\2\7\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\0\1\5\12\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\0\1\17\3\20\1\21\6\20"+
    "\1\22\6\20\1\23\3\20\1\24\3\20\6\0\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\36\1\37\1\40\1\41\1\42\1\43\1\36\1\44"+
    "\1\45\1\46\1\47\1\36\1\50\1\51\1\52\1\36"+
    "\3\0\1\53\6\0\1\1\u0196\0\1\54\1\55\12\0"+
    "\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\2\3\1\4\3\5\21\1\1\6"+
    "\5\0\2\7\2\10\34\0\1\7\40\0\1\11\20\0"+
    "\1\12\14\0\1\13\40\0\1\14\2\0\1\15\2\0"+
    "\1\16\15\0\1\14\1\0\1\17\3\0\1\20\5\0"+
    "\1\21\14\0\1\22\34\0\1\23\11\0\1\24\1\0"+
    "\1\25\4\0\1\21\26\0\1\26\33\0\1\27\16\0"+
    "\1\30\16\0\1\31\10\0\1\32\3\0\1\33\33\0"+
    "\1\12\3\0\1\34\11\0\1\25\2\0\1\35\4\0"+
    "\1\36\21\0\1\37\4\0\1\40\4\0\1\41\26\0"+
    "\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\56\0\270\0\56"+
    "\0\346\0\56\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\56\0\u0450\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\56\0\u0450\0\u0592\0\u05c0"+
    "\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\56\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\270\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\56\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\56\0\u1ee8"+
    "\0\56\0\u1f16\0\u1f44\0\u1f72\0\56\0\u1fa0\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\56\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\56"+
    "\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0"+
    "\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560"+
    "\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0"+
    "\0\u26fe\0\u272c\0\u275a\0\u2788\0\56\0\u27b6\0\u27e4\0\u2812"+
    "\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\56\0\u2954"+
    "\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4"+
    "\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06\0\u2c34"+
    "\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4"+
    "\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\56\0\u2e8a\0\u2eb8\0\u2ee6"+
    "\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056"+
    "\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6"+
    "\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336"+
    "\0\56\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478"+
    "\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8"+
    "\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758"+
    "\0\u3786\0\u37b4\0\u37e2\0\u3810\0\u1b7e\0\u383e\0\56\0\u386c"+
    "\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\56"+
    "\0\u39dc\0\u3a0a\0\u3a38\0\56\0\u3a66\0\u3a94\0\u3ac2\0\u3af0"+
    "\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32\0\u3c60"+
    "\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u3da2\0\u3dd0"+
    "\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\56"+
    "\0\u3f40\0\u3f6e\0\u3f9c\0\56\0\u3fca\0\u3ff8\0\u4026\0\u4054"+
    "\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196\0\u41c4"+
    "\0\56\0\u41f2\0\u4220\0\u424e\0\u427c\0\56\0\u42aa\0\u42d8"+
    "\0\u4306\0\u4334\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a\0\u4448"+
    "\0\u4476\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u455c\0\u458a\0\56"+
    "\0\u45b8\0\u45e6\0\u4614\0\u4642\0\56\0\u4670\0\u469e\0\u46cc"+
    "\0\u46fa\0\56\0\u4728\0\u4756\0\u4784\0\u47b2\0\u47e0\0\u480e"+
    "\0\u483c\0\u486a\0\u4898\0\u48c6\0\u48f4\0\u4922\0\u4950\0\u497e"+
    "\0\u49ac\0\u49da\0\u4a08\0\u4a36\0\u4a64\0\u4a92\0\u4ac0\0\u4aee"+
    "\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\0\1\3\1\4\1\2\1\5\1\6\1\2"+
    "\1\7\1\10\2\2\1\11\1\12\1\13\3\14\1\15"+
    "\2\14\1\16\1\2\1\17\1\20\1\21\1\22\2\2"+
    "\1\23\1\2\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\2\1\34\2\2\1\35\2\2\104\0"+
    "\1\36\25\0\1\37\32\0\1\40\13\0\1\41\42\0"+
    "\1\42\37\0\1\43\2\12\54\0\1\12\1\44\64\0"+
    "\26\45\30\0\1\45\1\46\24\45\31\0\1\36\12\0"+
    "\1\47\3\0\1\50\36\0\1\36\13\0\1\51\41\0"+
    "\1\36\2\0\1\52\3\0\1\53\4\0\1\54\41\0"+
    "\1\36\22\0\1\55\31\0\1\56\14\0\1\57\41\0"+
    "\1\36\1\0\1\60\1\0\1\61\6\0\1\62\42\0"+
    "\1\36\2\0\1\63\3\0\1\64\62\0\1\47\55\0"+
    "\1\65\57\0\1\6\55\0\1\66\37\0\1\36\2\0"+
    "\1\67\52\0\1\36\6\0\1\70\10\0\1\71\35\0"+
    "\1\36\2\0\1\72\20\0\1\73\37\0\1\74\7\0"+
    "\1\75\42\0\1\76\53\0\1\77\77\0\1\100\41\0"+
    "\1\101\45\0\1\102\44\0\1\103\57\0\1\103\67\0"+
    "\1\5\72\0\1\104\51\0\1\105\43\0\1\106\61\0"+
    "\1\107\46\0\1\110\20\0\1\111\53\0\1\112\41\0"+
    "\1\113\72\0\1\114\42\0\1\115\47\0\1\116\3\0"+
    "\1\117\74\0\1\120\55\0\1\121\55\0\1\122\55\0"+
    "\1\123\51\0\1\124\40\0\1\125\70\0\1\126\55\0"+
    "\1\127\61\0\1\130\54\0\1\131\47\0\1\132\55\0"+
    "\1\133\53\0\1\134\47\0\1\135\73\0\1\136\52\0"+
    "\1\137\44\0\1\140\63\0\1\141\65\0\1\142\45\0"+
    "\1\143\1\0\1\144\53\0\1\145\54\0\1\146\67\0"+
    "\1\147\53\0\1\150\57\0\1\151\32\0\1\116\1\0"+
    "\1\152\71\0\1\153\62\0\1\154\51\0\1\155\44\0"+
    "\1\156\72\0\1\157\40\0\1\160\57\0\1\161\52\0"+
    "\1\162\70\0\1\163\60\0\1\164\47\0\1\165\46\0"+
    "\1\166\63\0\1\167\64\0\1\170\44\0\1\171\64\0"+
    "\1\172\55\0\1\173\54\0\1\174\60\0\1\175\42\0"+
    "\1\176\70\0\1\177\47\0\1\200\30\0\1\201\110\0"+
    "\1\202\44\0\1\203\60\0\1\204\46\0\1\205\66\0"+
    "\1\206\60\0\1\207\56\0\1\210\47\0\1\211\56\0"+
    "\1\212\47\0\1\213\53\0\1\214\70\0\1\215\55\0"+
    "\1\216\14\0\1\217\17\0\1\116\71\0\1\220\31\0"+
    "\1\221\102\0\1\222\52\0\1\223\51\0\1\224\55\0"+
    "\1\225\65\0\1\226\41\0\1\227\61\0\1\230\63\0"+
    "\1\231\60\0\1\232\54\0\1\233\41\0\1\234\55\0"+
    "\1\235\60\0\1\236\55\0\1\237\64\0\1\240\64\0"+
    "\1\241\54\0\1\242\54\0\1\243\56\0\1\244\45\0"+
    "\1\245\66\0\1\246\37\0\1\247\56\0\1\250\70\0"+
    "\1\251\36\0\1\252\55\0\1\253\65\0\1\254\51\0"+
    "\1\255\71\0\1\256\57\0\1\257\36\0\1\260\50\0"+
    "\1\116\3\0\1\261\31\0\1\262\17\0\1\116\77\0"+
    "\1\263\37\0\1\264\73\0\1\265\41\0\1\266\70\0"+
    "\1\267\34\0\1\116\73\0\1\270\53\0\1\271\47\0"+
    "\1\272\61\0\1\53\51\0\1\233\46\0\1\273\100\0"+
    "\1\274\27\0\1\275\73\0\1\276\52\0\1\277\60\0"+
    "\1\300\64\0\1\271\41\0\1\301\6\0\1\302\55\0"+
    "\1\303\56\0\1\304\45\0\1\305\46\0\1\306\102\0"+
    "\1\307\46\0\1\310\47\0\1\311\66\0\1\312\63\0"+
    "\1\313\53\0\1\314\55\0\1\315\54\0\1\316\31\0"+
    "\1\317\102\0\1\320\36\0\1\321\63\0\1\322\55\0"+
    "\1\323\53\0\1\324\57\0\1\325\66\0\1\326\44\0"+
    "\1\327\51\0\1\63\61\0\1\330\51\0\1\331\75\0"+
    "\1\332\44\0\1\333\57\0\1\334\54\0\1\335\55\0"+
    "\1\336\60\0\1\337\51\0\1\340\46\0\1\341\61\0"+
    "\1\342\71\0\1\343\43\0\1\144\63\0\1\344\52\0"+
    "\1\345\54\0\1\346\45\0\1\347\61\0\1\350\53\0"+
    "\1\351\52\0\1\352\66\0\1\353\57\0\1\354\60\0"+
    "\1\355\52\0\1\356\60\0\1\357\37\0\1\360\62\0"+
    "\1\361\66\0\1\362\53\0\1\363\53\0\1\364\56\0"+
    "\1\365\60\0\1\366\50\0\1\367\37\0\1\370\76\0"+
    "\1\371\53\0\1\372\50\0\1\373\51\0\1\374\72\0"+
    "\1\375\53\0\1\376\43\0\1\377\45\0\1\u0100\70\0"+
    "\1\u0101\66\0\1\u0102\31\0\1\u0103\64\0\1\u0104\65\0"+
    "\1\u0105\60\0\1\u0106\56\0\1\u0107\56\0\1\u0108\16\0"+
    "\1\u0109\2\0\1\u010a\104\0\1\u010b\62\0\1\251\50\0"+
    "\1\u010c\51\0\1\u010d\45\0\1\u010e\16\0\1\u010f\36\0"+
    "\1\u0110\65\0\1\u0111\66\0\1\u0112\34\0\1\u0113\65\0"+
    "\1\u0114\75\0\1\u0115\4\0\1\320\55\0\1\u0116\40\0"+
    "\1\u0117\56\0\1\u0118\47\0\1\u0119\52\0\1\u011a\35\0"+
    "\1\u011b\106\0\1\u011c\55\0\1\u011d\41\0\1\u011e\53\0"+
    "\1\u011f\56\0\1\u0120\53\0\1\u0121\73\0\1\u0122\45\0"+
    "\1\u0123\46\0\1\u0124\74\0\1\u0125\55\0\1\u0117\45\0"+
    "\1\u0126\60\0\1\u0127\63\0\1\u0128\37\0\1\u0129\72\0"+
    "\1\u012a\44\0\1\u012b\56\0\1\u012c\55\0\1\u012d\50\0"+
    "\1\u012e\64\0\1\u012f\64\0\1\u0130\55\0\1\u0131\51\0"+
    "\1\u0132\52\0\1\u0133\64\0\1\u0134\47\0\1\u0135\63\0"+
    "\1\u0136\55\0\1\u0137\40\0\1\u0138\61\0\1\u0139\51\0"+
    "\1\u013a\56\0\1\u013b\54\0\1\u013c\66\0\1\u013d\55\0"+
    "\1\u013e\55\0\1\u013f\54\0\1\u0140\45\0\1\u0141\55\0"+
    "\1\u0142\67\0\1\u0143\35\0\1\u0144\74\0\1\u0145\54\0"+
    "\1\u0146\54\0\1\u0147\56\0\1\u0148\51\0\1\u0149\64\0"+
    "\1\u014a\54\0\1\u014b\55\0\1\u014c\56\0\1\u014d\41\0"+
    "\1\u014e\31\0\1\u014f\112\0\1\u0150\53\0\1\u0151\65\0"+
    "\1\u0152\35\0\1\u0153\74\0\1\u0154\52\0\1\u0155\57\0"+
    "\1\u0156\41\0\1\u0157\30\0\1\u0158\117\0\1\u0159\54\0"+
    "\1\u015a\52\0\1\u015b\43\0\1\u015c\56\0\1\u015d\56\0"+
    "\1\u015e\65\0\1\u015f\50\0\1\u0160\57\0\1\u0161\64\0"+
    "\1\u0162\53\0\1\u0163\42\0\1\u0164\61\0\1\u0165\65\0"+
    "\1\u0166\31\0\1\u0167\66\0\1\u0168\64\0\1\u0169\46\0"+
    "\1\u016a\54\0\1\u016b\64\0\1\u016c\43\0\1\u016d\73\0"+
    "\1\u016e\51\0\1\u016f\63\0\1\u0170\60\0\1\u0171\41\0"+
    "\1\u0172\50\0\1\u0173\62\0\1\u0174\41\0\1\u0175\102\0"+
    "\1\u0176\51\0\1\u0177\53\0\1\u0178\60\0\1\u0179\52\0"+
    "\1\u017a\60\0\1\u017b\63\0\1\u017c\41\0\1\u017d\51\0"+
    "\1\u017e\75\0\1\u017f\26\0\1\u0180\63\0\1\u0181\64\0"+
    "\1\u0182\64\0\1\u0183\53\0\1\u0184\57\0\1\u0185\53\0"+
    "\1\u0186\54\0\1\u0187\47\0\1\u0188\72\0\1\u0189\34\0"+
    "\1\u018a\46\0\1\u018b\45\0\1\u018c\100\0\1\u018d\27\0"+
    "\1\u0109\112\0\1\u018e\56\0\1\u018f\31\0\1\u0190\71\0"+
    "\1\u0191\65\0\1\u0192\52\0\1\u0193\61\0\1\u0194\60\0"+
    "\1\u0195\51\0\1\u0196\45\0\1\u0197\61\0\1\u0198\45\0"+
    "\1\u0199\67\0\1\u019a\60\0\1\u019b\47\0\1\u019c\45\0"+
    "\1\u019d\64\0\1\u019e\1\0\1\u019f\60\0\1\u01a0\42\0"+
    "\1\u01a1\67\0\1\u01a2\54\0\1\u01a3\60\0\1\u01a4\40\0"+
    "\1\u01a5\66\0\1\u01a6\53\0\1\u01a7\63\0\1\u01a8\41\0"+
    "\1\u01a9\54\0\1\u01aa\56\0\1\u01ab\72\0\1\u01ac\54\0"+
    "\1\u01ad\31\0\1\u01ae\74\0\1\u01af\63\0\1\u01b0\60\0"+
    "\1\u01b1\52\0\1\u01b2\47\0\1\u01b3\60\0\1\u01b4\34\0"+
    "\1\u01b5\101\0\1\u01b6\53\0\1\u0178\46\0\1\u01b7\42\0"+
    "\1\u01b8\100\0\1\u01b9\45\0\1\u01ba\66\0\1\u01bb\54\0"+
    "\1\u01bc\41\0\1\u01bd\72\0\1\u01be\50\0\1\u01bf\45\0"+
    "\1\u01c0\54\0\1\u01c1\66\0\1\u019f\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19228];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\22\1\1\11\5\0\2\1\1\11\1\1\34\0\1\11"+
    "\40\0\1\1\20\0\1\1\14\0\1\1\40\0\1\1"+
    "\2\0\1\11\2\0\1\1\15\0\1\11\1\0\1\11"+
    "\3\0\1\11\5\0\1\11\14\0\1\11\34\0\1\11"+
    "\11\0\1\11\1\0\1\1\4\0\1\1\26\0\1\11"+
    "\33\0\1\11\16\0\1\1\16\0\1\11\10\0\1\11"+
    "\3\0\1\11\33\0\1\11\3\0\1\11\11\0\1\1"+
    "\2\0\1\11\4\0\1\11\21\0\1\11\4\0\1\11"+
    "\4\0\1\11\26\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	private void imprimir(String descricao, String lexema){

		System.out.println(lexema + "-" + descricao);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
//          case 1:
//            { throw new RuntimeException("Caractere invalido" + yytext());
//            }
          // fall through
          case 35: break;
          case 2:
            { imprimir("Multiplicação", yytext());
            }
          // fall through
          case 36: break;
          case 3:
            { imprimir("Adição", yytext());
            }
          // fall through
          case 37: break;
          case 4:
            { imprimir("Digito", yytext());
            }
          // fall through
          case 38: break;
          case 5:
            { imprimir("Comparadores", yytext());
            }
          // fall through
          case 39: break;
          case 6:
            { imprimir("Caractere Especial", yytext());
            }
          // fall through
          case 40: break;
          case 7:
            { imprimir("Shiftop", yytext());
            }
          // fall through
          case 41: break;
          case 8:
            { imprimir("Letra", yytext());
            }
          // fall through
          case 42: break;
          case 9:
            { imprimir("Lista de declaração", yytext());
            }
          // fall through
          case 43: break;
          case 10:
            { imprimir("Expressão simples", yytext());
            }
          // fall through
          case 44: break;
          case 11:
            { imprimir("Constante", yytext());
            }
          // fall through
          case 45: break;
          case 12:
            { imprimir("Fator A", yytext());
            }
          // fall through
          case 46: break;
          case 13:
            { imprimir("Operação de repetição", yytext());
            }
          // fall through
          case 47: break;
          case 14:
            { imprimir("Identificador", yytext());
            }
          // fall through
          case 48: break;
          case 15:
            { imprimir("Tipos", yytext());
            }
          // fall through
          case 49: break;
          case 16:
            { imprimir("Termo", yytext());
            }
          // fall through
          case 50: break;
          case 17:
            { imprimir("Gravável", yytext());
            }
          // fall through
          case 51: break;
          case 18:
            { imprimir("Fator", yytext());
            }
          // fall through
          case 52: break;
          case 19:
            { imprimir("Operações de repetição", yytext());
            }
          // fall through
          case 53: break;
          case 20:
            { imprimir("Condição", yytext());
            }
          // fall through
          case 54: break;
          case 21:
            { imprimir("Lista de identação", yytext());
            }
          // fall through
          case 55: break;
          case 22:
            { imprimir("String Literal", yytext());
            }
          // fall through
          case 56: break;
          case 23:
            { imprimir("Declaração", yytext());
            }
          // fall through
          case 57: break;
          case 24:
            { imprimir("Sufixo da operação", yytext());
            }
          // fall through
          case 58: break;
          case 25:
            { imprimir("Operação de gravação", yytext());
            }
          // fall through
          case 59: break;
          case 26:
            { imprimir("Operação de leitura", yytext());
            }
          // fall through
          case 60: break;
          case 27:
            { imprimir("Corpo", yytext());
            }
          // fall through
          case 61: break;
          case 28:
            { imprimir("Operação de DoWhile", yytext());
            }
          // fall through
          case 62: break;
          case 29:
            { imprimir("Programa", yytext());
            }
          // fall through
          case 63: break;
          case 30:
            { imprimir("Operação de atribuição", yytext());
            }
          // fall through
          case 64: break;
          case 31:
            { imprimir("Expressão", yytext());
            }
          // fall through
          case 65: break;
          case 32:
            { imprimir("Operação de condição", yytext());
            }
          // fall through
          case 66: break;
          case 33:
            { imprimir("Operação de repetição While", yytext());
            }
          // fall through
          case 67: break;
          case 34:
            { imprimir("Operação de repetição For", yytext());
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
